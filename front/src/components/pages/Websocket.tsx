import * as React from "react";import {Icon, List, ListItem, Block, Button} from "framework7-react";import {WebsocketService} from "../../services/WebsocketService";import {getService} from "../../Bottle";import {User} from "../../models/User";import {useEffect, useState} from "react";import {DatabaseService} from "../../services/DatabaseService";import ContentPopup from "./ContentPopup";import {formatDate} from "../../util/Util";import {Electron} from "../../util/Electron";import {WebsocketMessageParser} from "../../services/WebsocketMessageParser";const {dialog} = Electron.require('electron');export type WebsocketProps = {    user: User,    onMessage : (message : any) => any,    onError : (error : any) => any};const ws: WebsocketService = getService<WebsocketService>('WebsocketService');const db: DatabaseService = getService<DatabaseService>("Database");const messageParser : WebsocketMessageParser = getService<WebsocketMessageParser>('WebsocketMessageParser');const take = 25;let skip = 0;export default ({user, onMessage, onError}: WebsocketProps) => {    const [connecting, setConnecting] = useState(true);    const [logs, setLogs] = useState(null);    const [count, setCount] = useState(0);    const [log, setLog] = useState(null);    const [date, setDate] = useState(Date.now);        useEffect(() => {        ws.connect(user, {            onConnect: () => {                onMessage('Connected to WebSocket.');                setConnecting(false);            },            onMessage: message => {                messageParser.onMessage(message, onMessage, onError);                const copy: any = JSON.parse(JSON.stringify(message));                if (copy.session) copy.session = 'REVOKED';                db.writeLog('ws', 'log', copy);                             },            onDisconnect: () => {                db.writeLog('ws', 'error', 'Disconnected from RSPeer Servers.');            },            onError: err => {                onError(err);                db.writeLog('ws', 'error', err.toString());            }        });           }, []);        async function viewLogs() {        const logs = await db.getLogs('ws', take, skip);        setLogs(logs.values);        setCount(logs.count)    }        function deleteLogs() {        dialog.showMessageBox({            type : 'warning',            title : 'Are you sure?',            buttons : ['Yes', 'Cancel'],            message : 'Are you sure you want to delete logs? This can not be undone.'        }, (index : number) => {          if(index === 1) {              return;          }          db.removeLogs('ws');          setLogs(null)        })       }    function showLog(message : any) {        return <Block>            <p>{message}</p>        </Block>            }    function renderLogs() {        if(log) {            return showLog(log)        }        if (!logs) return <p>There are no logs.</p>;        const l: any[] = logs!;        const title = take < count ? `Showing ${skip} - ${skip + take < count ? skip + take : count}/${count} logs.` : `Showing all logs.`;        return <List>            <ListItem header={''} title={title} view="View" onClick={() => {            }}>                {skip + take < count && <Button onClick={() => {                    skip += take;                    viewLogs();                }}>Next {take}</Button>}                {count > 0 && <Button onClick={() => {                    deleteLogs();                }}><span style={{color : '#ff6767'}}>Delete Logs</span></Button>}            </ListItem>            {l.map(log => {                const message = typeof log.message === 'string' ? log.message : JSON.stringify(log.message, null, 2);                const color = log.type === 'error' ? '#ff6767' : '#4cd964';                const format: any = <span style={{color}}>{message}</span>;                return <ListItem header={formatDate(log.timestamp)} title={format} view="View" onClick={() => {                    setLog(format);                      setLogs(null);                }}>                </ListItem>            })}        </List>    }    const socket = ws.getSocket();    const title: any =        connecting ? <span style={{color: '#4cd964'}}>Connecting...</span> :            ws.isConnected() ? <span style={{color: '#4cd964'}}>Connected</span> :                <span style={{color: '#ff6767'}}>Not Connected. Launching remote clients may not work.</span>;    return <React.Fragment>        <ContentPopup key={'ws-logs-' + date} open={logs != null || log != null} content={renderLogs()} title={'Viewing RSPeer Server Connection Logs'}                      onFinish={() => {                          if(log) {                              setLog(null);                              setTimeout(viewLogs, 10);                          }                          else {                              skip = 0;                              setLogs(null)                          }                      }}/>        <List>            {socket &&            <ListItem header="RSPeer Server Connection" title={title} link={"#"} after={"View Logs"} onClick={viewLogs}>                <Icon slot="media" f7="bolt"/>            </ListItem>}        </List>    </React.Fragment>};